pragma solidity ^0.4.11;

import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

/// @title Contract to bet Ether for a number and win randomly when the number of bets is met.
/// @author Merunas Grincalaitis, Additions by Max DiGiacomo
contract Casino is usingOraclize {
   address owner;

   // The minimum bet a user has to make to participate in the game
   uint public minimumBet = 10 finney; // Finney is a like a 'cent' of Eth // Equal to 0.01 ether // Currently equal to ~$2

   // The total amount of Ether bet for this current game
   uint public totalBet;

   // The total number of bets the users have made
   uint public numberOfBets;

   // The maximum amount of bets can be made for each game
   uint public maxAmountOfBets = 10;

   // The max amount of bets that cannot be exceeded to avoid excessive gas consumption
   // when distributing the prizes and restarting the game
   uint public constant LIMIT_AMOUNT_BETS = 100;

   // The number that won the last game
   uint public numberWinner;

   // Array of players
   address[] public players;

   // Each number has an array of players. Associate each number with a bunch of players
   mapping(uint => address[]) numberBetPlayers;

   // The number that each player has bet for
   mapping(address => uint) playerBetsNumber;

   // Modifier to only allow the execution of functions when the bets are completed
   modifier onEndGame(){
      if(numberOfBets >= maxAmountOfBets) _;
   }

   /// @notice Constructor that's used to configure the minimum bet per game and the max amount of bets
   /// @param _minimumBet The minimum bet that each user has to make in order to participate in the game
   /// @param _maxAmountOfBets The max amount of bets that are required for each game
   function Casino(uint _minimumBet, uint _maxAmountOfBets){
      owner = msg.sender;

      if(_minimumBet > 0) minimumBet = _minimumBet;
      if(_maxAmountOfBets > 0 && _maxAmountOfBets <= LIMIT_AMOUNT_BETS)
         maxAmountOfBets = _maxAmountOfBets;

      // Set the proof of oraclize in order to make secure random number generations
      oraclize_setProof(proofType_Ledger);
   }

   /// @notice Check if a player exists in the current game
   /// @param player The address of the player to check
   /// @return bool Returns true is it exists or false if it doesn't
   function checkPlayerExists(address player) returns(bool){
      if(playerBetsNumber[player] > 0)
         return true;
      else
         return false;
   }

   /// @notice To bet for a number by sending Ether
   /// @param _numbersToBet An array of the numbers the players want to bet for. All elements must be between 1 and 15 both inclusive
   
   function bet(uint[] _numbersToBet) payable{

      // Check that the max amount of bets hasn't been met yet
      assert(numberOfBets < maxAmountOfBets);

      // Check that the player doesn't already exists
      assert(checkPlayerExists(msg.sender) == false);

      // Check that the array has the correct amount of numbers
      assert(_numbersToBet.length == 3);
      
      // Check that the numbers to bet are all within the range 1 - 15
      assert(_numbersToBet[0] >= 1 && _numbersToBet[0] <= 15);
      assert(_numbersToBet[1] >= 1 && _numbersToBet[1] <= 15);
      assert(_numbersToBet[2] >= 1 && _numbersToBet[2] <= 15);
     
      
      // Check that the amount paid is bigger or equal to the minimum bet. Ensures the bet comes in increments of roughly $2 dollars
      assert(msg.value >= minimumBet && msg.value % 0.01 == 0);

      // Gives the array of betting numbers to the player. Need to hash array because solidity cannot map arrays. 
      // Two arrays must have the same length and content (in the same order) to have the same hash
      playerBetsNumber[msg.sender] = uint(keccak256(_numbersToBet));
      
      
      
      // The player msg.sender has bet for that number
      numberBetPlayers[_numbersToBet[].push(msg.sender);

      // Increases the bets by one. Increasesthe prize pool by the amount the user calls the function with
      numberOfBets += 1;
      totalBet += msg.value;

      // If this function maxes out the betting pool, a winner is generated
      if(numberOfBets >= maxAmountOfBets) generateNumberWinner();
   }

   /// @notice Generates a random number between 1 and 15 both inclusive.
   /// Must be payable because oraclize needs gas to generate a random number.
   /// Can only be executed when the game ends.
   function generateNumberWinner() payable onEndGame {
      uint numberRandomBytes = 7;
      uint delay = 0;
      uint callbackGas = 200000;

      bytes32 queryId = oraclize_newRandomDSQuery(delay, numberRandomBytes, callbackGas);
   }

   /// @notice Callback function that gets called by oraclize when the random number is generated
   /// @param _queryId The query id that was generated to proofVerify
   /// @param _result String that contains the number generated
   /// @param _proof A string with a proof code to verify the authenticity of the number generation
   function __callback(
      bytes32 _queryId,
      string _result,
      bytes _proof
   ) oraclize_randomDS_proofVerify(_queryId, _result, _proof) onEndGame {

      // Checks that the sender of this callback was in fact oraclize
      assert(msg.sender == oraclize_cbAddress());
      
      // These will be used to produce two more winning numbers. 
      // The hash function (keccak256) ensures they will be significantly different than the first number 
      result2 = _result + 10;
      result3 = _result + 20;
      
    

      
      // This will produce a number that is always from 1-15
      // The plus 1 ensures you will not get a zero for any given input
      numberWinner1 = (uint(keccak256(_result))%15+1);
      numberWinner2 = (uint(keccak256(result2))%15+1);
      numberWinner3 = (uint(keccak256(result3))%15+1);
      
      // Creates an array that holds the winning numbers. The order will matter.
      uint[] winningTicket[];
      
      // Assigns the winnings numbers to elements in the array
      winningTicket[0] = numberWinner1;
      winningTicket[1] = numberWinner2;
      winningTicket[2] = numberWinner3;
      
      // Hashes the array of winning numbers to an int that can be mapped
      uint numberWinner = uint(keccak256(winningTicket));
      
      distributePrizes();
   }

   /// @notice Sends the corresponding Ether to each winner then deletes all the
   /// players for the next game and resets the `totalBet` and `numberOfBets`
   
   
   function distributePrizes() onEndGame {
      
      uint winnerEtherAmount = totalBet / numberBetPlayers[numberWinner].length; // How much each winner gets

      for(uint i = 0; i <= 4; i++){
         if nu
      }
      
      // Loop through all the winners to send the corresponding prize for each one
      for(uint i = 0; i < numberBetPlayers[numberWinner].length; i++){
         numberBetPlayers[numberWinner][i].transfer(winnerEtherAmount);
      }

      // Delete all the players for each number
      for(uint j = 1; j <= 10; j++){
         numberBetPlayers[j].length = 0;
      }

      totalBet = 0;
      numberOfBets = 0;
   }
}
